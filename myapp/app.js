const express = require('express');
const cors = require('cors');
const dotenv = require('dotenv');
const { createClient } = require('@supabase/supabase-js');
const { body, validationResult } = require('express-validator');

dotenv.config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

const app = express();
const port = process.env.PORT || 3005;

app.use(cors({ origin: 'http://localhost:3006' }));
app.use(express.json());

const loggingMiddleware = (req, res, next) => {
    console.log(`${new Date().toISOString()} - ${req.method} - ${req.url}`);
    next();
};

app.use(loggingMiddleware);

app.get("/", (req, res) => {
    res.status(201).send({ msg: "Hello" });
});

async function createTodosTable() {
    const sql = `
    CREATE TABLE IF NOT EXISTS public.todos (
        id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        title TEXT NOT NULL,
        completed BOOLEAN DEFAULT FALSE
    );
    `;

    const { error } = await supabase.rpc('execute_sql', { query: sql });
    if (error) {
        console.error("Error creating table:", error.message);
    } else {
        console.log("Table 'todos' ensured.");
    }
}

createTodosTable();

app.get('/todos', async (req, res) => {
    const { data: todos, error } = await supabase.from('todos').select('*');
    if (error) {
        return res.status(400).json({ error: error.message });
    }
    res.status(200).json(todos);
});

app.post('/todos', body('title').notEmpty().withMessage('Title cannot be empty'), async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }
    const { title } = req.body;
    const { data: newTodo, error } = await supabase.from('todos').insert([{ title, completed: false }]).select().single();
    if (error) {
        return res.status(400).json({ error: error.message });
    }
    res.status(201).json(newTodo);
});

app.put('/todos/:id', body('completed').isBoolean().withMessage('Completed must be a boolean'), async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }
    const { completed } = req.body;
    const { id } = req.params;
    const { data: updatedTodo, error } = await supabase.from('todos').update({ completed }).eq('id', id).single();
    if (error) {
        return res.status(400).json({ error: error.message });
    }
    res.status(200).json(updatedTodo);
});

app.delete('/todos/:id', async (req, res) => {
    const { id } = req.params;
    const { data: deletedTodo, error } = await supabase.from('todos').delete().eq('id', id).single();
    if (error) {
        return res.status(400).json({ error: error.message });
    }
    res.status(200).json({ message: "Tarea eliminada", deletedTodo });
});

app.listen(port, () => {
    console.log(`Example app listening on port ${port}`);
});
